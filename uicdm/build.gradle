description = "Provides a graphical interface to the CDM library."
ext.title = "ToolsUI"

apply from: "$rootDir/gradle/any/dependencies.gradle"
apply from: "$rootDir/gradle/any/java.gradle"
apply from: "$rootDir/gradle/any/testing.gradle"
apply from: "$rootDir/gradle/any/coverage.gradle"
apply from: "$rootDir/gradle/any/archiving.gradle"
apply from: "$rootDir/gradle/any/publishing.gradle"
apply from: "$rootDir/gradle/any/properties.gradle"  // For keystore and Nexus properties.

dependencies {
    compile project(":cdm:core")
    compile project(":cdm:image")  // things that depend on java.awt
    compile project(":cdm:radial")  // things that depend on java.awt
    compile project(":bufr")
    compile project(":grib")
    compile project(":httpservices")
    compile project(":netcdf4")
    compile project(":opendap")
    compile project(":uibase")
    compile project(":visadCdm")        // For Gempak IOSPs.
    compile project(":waterml")         
    
    compile libraries["jdom2"]
    compile libraries["jcommon"]
    compile libraries["jfreechart"]
    compile libraries["jgoodies-forms"]
    compile libraries["httpclient"]
    compile libraries["httpcore"]
    compile libraries["bounce"]
    compile libraries["re2j"]

    compile libraries["slf4j-api"]
    runtime libraries["logback-classic"]
}

//////////////////////////////////////////////////////////

ext {
    // See http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/manifest.html#CIHJIIHD
    // See http://docs.oracle.com/javase/8/docs/technotes/guides/javaws/developersguide/syntax.html#jnlp_elements
    // The Codebase attributes in the JAR manifest and JNLP must match, or else javaws fails to start with the error:
    // "Application Blocked by Java Security".
    webstartCodebase = "https://artifacts.unidata.ucar.edu/repository/thredds-misc/$version/webstart/"

    // Webstart can also work if both Codebase attributes are unspecified.
    // Setting this property to null will produce a manifest and JNLP files with no Codebase attributes.
    // LOOK: Use this for local Webstart testing; use the other for deployment to production.
//     webstartCodebase = null

    webstartBuildDir  = file("$buildDir/webstart")
    extensionJnlpFile = file("$webstartBuildDir/netCDFtoolsExtraJars.jnlp")
    baseJnlpFile      = file("$webstartBuildDir/netCDFtools.jnlp")
}

jar {
    manifest {
        Map<String,?> attribs = [:]
        attribs['Main-Class'] = 'ucar.nc2.ui.ToolsUI'

        // MANIFEST.MF is an @Input to the Jar task, so when it changes, Jar will be considered out-of-date.
        // Here, we're writing an attribute to MANIFEST.MF. When its value changes, MANIFEST.MF will change,
        // and Jar will be considered out-of-date.
        // So, indirectly, we've made the "runtime" configuration an @Input to the Jar task.
        attribs['Class-Path'] = configurations.runtime.collect { it.name }.join(' ')

        // The attributes below are necessary for Web Start; see http://goo.gl/Ob6Wid.
        // ui-<version>.jar is the main jar in the ToolsUI extension JNLP file, so only its manifest needs these.
        attribs['Application-Name'] = project.title
        attribs['Permissions'] = 'all-permissions'
        attribs['Trusted-Only'] = 'true'
        if (webstartCodebase) {
            attribs['Codebase'] = webstartCodebase
        }

        attributes attribs
    }

    // I used to create META-INF/INDEX.LIST here to speedup Web Start loading, but it turns out that Spring and
    // INDEX.LIST don't get along: https://jira.spring.io/browse/SPR-5705
    // As a result, I don't think that Web Start is loading jars lazily as I intended.
    // LOOK: Does that make the 'Class-Path' manifest attribute and 'download="lazy"' JNLP attributes pointless?
}

import edu.ucar.build.ui.ToolsUiJnlpExtensionTask
import edu.ucar.build.ui.ToolsUiJnlpBaseTask
import edu.ucar.build.ui.SignJarsTask

task toolsUiJnlpExtension(type: ToolsUiJnlpExtensionTask) {
    codebase = webstartCodebase
    outputFile = extensionJnlpFile
}

task toolsUiJnlpBase(type: ToolsUiJnlpBaseTask, dependsOn: toolsUiJnlpExtension) {
    codebase = webstartCodebase
    extensionJnlpFileName = extensionJnlpFile.name
    outputFile = baseJnlpFile
}

task signJars(type: SignJarsTask, dependsOn: jar) {
    def jarsToSign = [ tasks.jar.archivePath ]          // ui-<version>.jar
    jarsToSign.addAll configurations.runtime.resolve()  // All its dependencies.

    sourceJars = files(jarsToSign)
    outputDir  = webstartBuildDir

    onlyIf {
        // Will be evaluated at task execution time, not during configuration.
        // Fails the build if the specified properties haven't been provided.
        keystorePath     = getPropertyOrFailBuild KEYSTORE_PATH
        keystorePassword = getPropertyOrFailBuild KEYSTORE_PASSWORD
        keystoreAlias    = getPropertyOrFailBuild KEYSTORE_ALIAS
        return true
    }
}

// It's possible to test Webstart files locally before publishing them.
// 1. Uncomment the 'webstartCodebase = null' line in the ext{} block above.
// 2. Run this task: ./gradlew :uicdm:buildWebstart
// 3. You may need to whitelist Webstart locations that refer to the local file system.
//    Go to "Java Control Panel->Security->Edit Site List..." and add the entry "file:/".
// 4. Navigate to $webstartBuildDir and execute: javaws netCDFtools.jnlp
task buildWebstart(group: "Webstart") {
    description = "Create the JNLP and signed JARs needed for Webstart."

    // Aggregates other Webstart tasks.
    dependsOn toolsUiJnlpExtension, toolsUiJnlpBase, signJars
}

import edu.ucar.build.publishing.PublishToRawRepoTask

task publishWebstart(type: PublishToRawRepoTask, dependsOn: buildWebstart) {
    group = "Webstart"
    description = "Publish Webstart to Nexus."

    host = "https://artifacts.unidata.ucar.edu/"
    repoName = "thredds-misc"

    srcFile = webstartBuildDir
    destPath = "$version/webstart/"

    onlyIf {
        username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
        password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
        return true
    }
}
