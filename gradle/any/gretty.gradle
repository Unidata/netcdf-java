// In Gradle, dependencies specified in a parent's buildscript {} block are visible to all children.
// However, that behavior doesn't seem to hold for script plugins (this file) applied from the parent script.
// So we have to repeat ourselves. See the root project's build script for more notes on buildscript {} block weirdness.
buildscript {
  apply from: "$rootDir/gradle/any/shared-mvn-coords.gradle"

  repositories {
    jcenter()
  }
  dependencies {
    classpath buildPlugins.gretty  // We want to import FarmBeforeIntegrationTestTask, etc.
  }
}

apply from: "$rootDir/gradle/any/properties.gradle"
apply plugin: 'org.gretty'
apply plugin: 'jacoco'

import org.akhikhl.gretty.GradleUtils
import org.akhikhl.gretty.FarmStartTask

gretty {
  servletContainer = 'tomcat85'  // All webapps run on Tomcat 8.5.x

  // Pass filtered system properties to the embedded Tomcat that Gretty will launch.
  systemProperties addFilteredSysProps([:])

  // We want to modify Gretty tasks but they won't be added to the project until after evaluation:
  // http://goo.gl/qlFXTD. So, our modifications must also occur after evaluation.
  afterEvaluate {
    // Change the log directory of all tasks that start a server.
    // Due to a bug, the normal instanceof operator won't work here. Nor will tasks.withType().
    tasks.matching {
      GradleUtils.instanceOf(it, FarmStartTask.name)
    }.each {
      // LauncherConfig is only meant to be retrieved during the execution phase, hence the doFirst{}.
      // If we try to grab it during evaluation, we get:
      //   Error opening zip file or JAR manifest missing :
      //   build/tmp/expandedArchives/org.jacoco.agent-0.7.7.201606060606.jar_aj7uwwfluzmrbfb6clshgf6du/jacocoagent.jar
      it.doFirst {
        // tomcatBaseDir is the working directory for embedded tomcat. We want to write our logs there as well.
        File tomcatBaseDir = it.launcherConfig.baseDir

        // Will be something like: "$projectDir/build/serverBaseDir_tomcat8/logs".
        it.logDir = file("$tomcatBaseDir/logs").absolutePath
      }
    }

    appBeforeIntegrationTest {
      // we do not need to capture coverage on these webapps, as they only exist
      // for client testing
      jacoco.enabled = false
    }
  }
}

farm {
  jvmArgs = ["-Dlog4j.configurationFile=$rootDir/gradle/gretty/log4j2Config.xml"]
  // used by :dap4 test
  webapp 'edu.ucar:d4ts:5.0.0-SNAPSHOT@war', contextPath: '/d4ts'

  // :opendap and :httpservices test.
  webapp 'edu.ucar:dtswar:5.0.0-SNAPSHOT@war', contextPath: '/dts'
  integrationTestTask = 'test'

  // Enable TLS
  httpsEnabled = true
  sslKeyStorePath = "$rootDir/gradle/gretty/tomcat/keystore"
  sslKeyStorePassword = 'secret666'
}

if (project in publishedProjects) {
  apply plugin: 'maven-publish'
  // the gradle plugin adds a dependency on javax.servlet, as well as exclusions for
  // some spring-boot jars, which end up in the poms on dependencies like slf4j-api.
  // ain't nobody got time for that
  publishing {
    publications {
      mavenJava(MavenPublication) {
        pom.withXml {
          Node pomNode = asNode()
          pomNode.dependencies.'*'.findAll() {
            it.artifactId.text() == 'javax.servlet-api'
          }.each() {
            it.parent().remove(it)
          }
          pomNode = asNode()
          pomNode.dependencies.dependency.exclusions.'*'.findAll() {
            it.artifactId.text() == 'spring-boot-starter-tomcat' |
                it.artifactId.text() == 'spring-boot-starter-jetty'
          }.each() {
            it.parent().remove(it)
          }
          pomNode = asNode()
          pomNode.dependencies.dependency.exclusions.findAll() {
            it.children().isEmpty()
          }.each() {
            it.parent().remove(it)
          }
        }
      }
    }
  }
}
