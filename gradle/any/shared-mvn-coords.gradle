// Applied in buildscript blocks that need to declare dependencies directly on the classpath, and in
// gradle/any/dependencies.gradle (which makes this available to every project)
ext {
  // Extra properties must be declared in the "ext" namespace. After declaration, they can be used without prefix.
  // These will be inherited by any project buildscript that needs to reference a dependency or plugin by its full
  // maven coordinates.

  // plugin version management
  buildPlugins = [:]
  buildPlugins.gretty = 'org.gretty:gretty:3.0.3'
  buildPlugins.shadow = 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
  buildPlugins.sonarqube = 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0'
  buildPlugins.spotless = 'com.diffplug.spotless:spotless-plugin-gradle:4.5.1'
  buildPlugins.protobuf = 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
  buildPlugins.depcheck = 'org.owasp:dependency-check-gradle:6.0.2'
  buildPlugins.nexus = 'edu.ucar.unidata:unidata-nexus-gradle:0.0.1'
  buildPlugins.jekyll = 'edu.ucar.unidata.site:jekyll-plugin:0.0.3'

  // These versions are needed in places where we cannot use the netcdf-java-platform or netcdf-java-testing-platform
  // projects to handle resolving versions.
  // The best we can do is define the version here, which can then be applied in all of the places we need the full
  // maven coordinates.
  depVersion = [:]
  // slf4j version defined here because we need access to it in gradle/any/dependencies.gradle because we want to
  // control JCL logging with slf4j (through dependency substitution), and we can't access version information
  // from the java platform alone.
  depVersion.slf4j = '1.7.28'
  // In all cases except one, junit is a testImplementation configuration. However, for the cdm-test-utils
  // subproject, it is an api configuration. We define the junit version here so that it can be defined
  // in the netcdf-java-testing-platform and in the build.gradle config for cdm-test-utils subproject.
  depVersion.junit = '4.13.2'
  // need to define the versions of protobuf and grpc here because they are needed in the protobuf configuration
  // closure, and the version defined in eiter the java platform cannot be accessed from within the closure.
  // grpc pulls in protobuf (currently 3.12.0, which is three minor versions behind the latest). I assume we
  // should try to keep within the same major.minor version of the versions grpc needs, but that differences in
  // point releases are ok.
  depVersion.protobuf = '3.12.4'
  depVersion.grpc = '1.36.1'
}
