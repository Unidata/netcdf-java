// In Gradle, dependencies specified in a parent's buildscript {} block are visible to all children.
// However, that behavior doesn't seem to hold for script plugins (this file) applied from the parent script.
// So we have to repeat ourselves. See the root project's build script for more notes on buildscript {} block weirdness.
buildscript {
  // get buildPlugins map
  apply from: "$rootDir/gradle/any/shared-mvn-coords.gradle"

  repositories {
    mavenCentral()
    maven {
      url 'https://plugins.gradle.org/m2/'  // For Gradle plugins.
    }
  }
  dependencies {
    classpath buildPlugins.shadow // We want to import the ShadowJar class.
  }
}

if (!name.equals(rootProject.name)) {
  throw new GradleException("This script plugin should only be applied to the root project, not '$name'.")
}

// need this to resolve dependencies defined through the netcdf-java-platform project
apply from: "$rootDir/gradle/any/dependencies.gradle"
apply plugin: 'com.github.johnrengelman.shadow'

// todo: this indicates we need have too much logic in our script plugin
// This script plugin is a candidate for moving into buildSrc.
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

configurations {
  // ncIdv
  // netcdfAll
  toolsUI
  // dap4lib
}

dependencies {
  toolsUI enforcedPlatform(project(':netcdf-java-platform'))
  toolsUI project(':uicdm')
  toolsUI 'ch.qos.logback:logback-classic'
}

def fatJarTasks = []

fatJarTasks << tasks.create(name: 'buildToolsUI', type: ShadowJar) {
  baseName = 'toolsUI'
  setArchiveBaseName('toolsUI')
  configurations = [project.configurations.toolsUI]

  doFirst {
    manifest.attributes project(':uicdm').tasks.jar.manifest.attributes
  }
}

// Common configuration.
configure(fatJarTasks) {
  dependsOn configurations*.buildDependencies
  group = 'shadow'

  // Filter out crap from various other packages.
  exclude 'AUTHORS'
  exclude 'DATE'
  exclude 'LICENCE'
  exclude 'LICENSE'
  exclude 'NOTICE'
  exclude '*.txt'
  exclude 'META-INF/INDEX.LIST'
  exclude 'META-INF/DEPENDENCIES'
  exclude 'META-INF/LICENSE'
  exclude 'META-INF/NOTICE'
  exclude 'META-INF/*.SF'
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.RSA'
  exclude 'META-INF/*.txt'
  exclude 'META-INF/*.xml'

  // Transformations
  append('META-INF/spring.handlers')
  append('META-INF/spring.schemas')
  mergeServiceFiles()
}

// The base-plugin's "assemble" task automatically creates all artifacts added to the "archives" configuration.
artifacts {
  archives buildToolsUI
}
