plugins {
  // Provide convenience executables for testing
  id 'application'
  id 'com.github.psxpaul.execfork' version '0.2.2'
}

import com.github.psxpaul.task.JavaExecFork

repositories {
  gradlePluginPortal()
  maven {
    // For jj2000
    url 'https://artifacts.unidata.ucar.edu/repository/unidata-releases/'
  }
}

description = 'gRPC client and server implementation of CDM Remote Procedure Calls (gCDM).'
ext.title = 'CDM Remote Procedure Calls'

apply from: "$rootDir/gradle/any/java-library.gradle"
apply from: "$rootDir/gradle/any/protobuf.gradle"
apply from: "$rootDir/gradle/any/shared-mvn-coords.gradle"

dependencies {
  api project(':cdm:cdm-core')

  implementation "io.grpc:grpc-protobuf:${depVersion.grpc}"
  implementation "io.grpc:grpc-stub:${depVersion.grpc}"

  compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

  runtimeOnly project(':bufr')
  runtimeOnly project(':grib')
  runtimeOnly "io.grpc:grpc-netty-shaded:${depVersion.grpc}"

  testImplementation project(':netcdf4')

  testImplementation enforcedPlatform(project(':netcdf-java-testing-platform'))
  testImplementation project(':cdm-test-utils')
  testImplementation 'com.google.truth:truth'
  testImplementation 'junit:junit'
  testImplementation 'commons-io:commons-io'
  testImplementation 'org.mockito:mockito-core'
  testImplementation "io.grpc:grpc-testing:${depVersion.grpc}"

  // logging
  implementation 'org.slf4j:slf4j-api'
  runtimeOnly 'ch.qos.logback:logback-classic'
}

protobuf {
  protoc { artifact = "com.google.protobuf:protoc:${depVersion.protobuf}" }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:${depVersion.grpc}" }
  }
  generateProtoTasks {
    all()*.plugins { grpc {} }
  }
}

application {
  mainClass = 'ucar.gcdm.server.GcdmServer'
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
  main {
    java {
      srcDirs 'build/generated/source/proto/main/grpc'
    }
  }
}

task startDaemon(type: JavaExecFork) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'ucar.gcdm.server.GcdmServer'
  // To attach the debugger to the gcdm server add to the jvmArgs
  // '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'
  jvmArgs = [ '-Xmx512m', '-Djava.awt.headless=true' ]
  standardOutput = new File("$buildDir/gcdm_logs/gcdm.log")
  errorOutput = new File("$buildDir/gcdm_logs/gcdm-error.log")
  stopAfter = test
  waitForPort = 16111
  waitForOutput = 'Server started, listening on 16111'
}

test.dependsOn(startDaemon)
