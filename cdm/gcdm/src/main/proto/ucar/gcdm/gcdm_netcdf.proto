/*
 * Copyright (c) 1998-2023 University Corporation for Atmospheric Research/Unidata
 * See LICENSE for license information.
 */

syntax = "proto3";

package ucar.gcdm;

option java_package = "ucar.gcdm";
option java_outer_classname = "GcdmNetcdfProto";

message HeaderRequest {
  string location = 1;
}

message HeaderResponse {
  Error error = 1; // non-empty on error
  uint32 version = 2; // response version
  Header header = 3;
}

message DataRequest {
  string location = 1;
  string variable_spec = 2;
}

message DataResponse {
  Error error = 1; // non-empty on error
  uint32 version = 2; // response version

  string location = 3;
  string variable_spec = 4; // the requested variableSpec
  string var_full_name = 5; // Variable full name

  Data data = 6;
}

message Error {
  string message = 1;
  uint32 code = 2;
}

/////////////////////////////////////////////////////////////////////////////

message Attribute {
  string name = 1;
  DataType data_type = 2; // cant use STRUCTURE or SEQUENCE or OPAQUE or ENUM; CHAR deprecated, use STRING
  uint32 length = 3;
  Data data = 4;
}

enum DataType {
  DATA_TYPE_UNSPECIFIED = 0;
  DATA_TYPE_BYTE = 1;
  DATA_TYPE_SHORT = 2;
  DATA_TYPE_INT = 3;
  DATA_TYPE_LONG = 4;
  DATA_TYPE_FLOAT = 5;
  DATA_TYPE_DOUBLE = 6;
  DATA_TYPE_STRING = 7;
  DATA_TYPE_STRUCTURE = 8;
  DATA_TYPE_SEQUENCE = 9;
  DATA_TYPE_ENUM1 = 10;
  DATA_TYPE_ENUM2 = 11;
  DATA_TYPE_ENUM4 = 12;
  DATA_TYPE_OPAQUE = 13;

  DATA_TYPE_UBYTE = 14;
  DATA_TYPE_USHORT = 15;
  DATA_TYPE_UINT = 16;
  DATA_TYPE_ULONG = 17;

  DATA_TYPE_CHAR = 18; // prefer String
}

message Dimension {
  string name = 1; // short name - optional when private
  uint64 length = 2; // optional when vlen, may be zero if unlimited
  bool is_unlimited = 3;
  bool is_vlen = 4;
  bool is_private = 5;
}

message EnumTypedef {
  message EnumType {
    uint32 code = 1;
    string value = 2;
  }
  string name = 1;
  DataType base_type = 2;
  repeated EnumType maps = 3;
}

message Group {
  string name = 1; // short name
  repeated Dimension dimensions = 2;
  repeated Variable variables = 3;
  repeated Structure structures = 4;
  repeated Attribute attributes = 5;
  repeated Group groups = 6;
  repeated EnumTypedef enum_types = 7;
}

message Header {
  string location = 1;
  string title = 2;
  string id = 3;

  Group root = 4;
}

message Structure {
  string name = 1; // short name
  DataType data_type = 2; // STRUCTURE or SEQUENCE
  repeated Dimension shapes = 3; // actual dimension instead of reference
  repeated Attribute attributes = 4;
  repeated Variable variables = 5; // members that are not structs
  repeated Structure structs = 6; // struct members that are structs
}

message Variable {
  string name = 1; // short name
  DataType data_type = 2;
  repeated Dimension shapes = 3; // actual dimension instead of reference
  repeated Attribute attributes = 4;
  string enum_type = 5; // EnumTypedef name, only for enum types
  Data data = 6; // "immediate" - store small data in header
}

//////////////////////////////////

message Data {
  DataType data_type = 1;
  repeated uint32 shapes = 2;

  // oneof, depends on data_type
  repeated bytes byte_data = 3; // ENUM1, BYTE, OPAQUE, CHAR
  repeated sint32 int_data = 4; // SHORT, INT, ENUM2, USHORT
  repeated uint32 uint_data = 5; // ENUM4, UINT
  repeated sint64 long_data = 6; // LONG
  repeated uint64 ulong_data = 7; // ULONG
  repeated float float_data = 8; // FLOAT
  repeated double double_data = 9; // DOUBLE
  repeated string string_data = 10; // STRING
  repeated Data vlen_data = 11; // VLEN

  // STRUCTURE, SEQUENCE
  StructureMembersProto members = 12;
  repeated StructureDataProto rows = 13; // row oriented: one for each row
}

message StructureDataProto {
  repeated Data member_data = 1; // one for each member
}

message StructureMembersProto {
  string name = 1;
  repeated StructureMemberProto members = 12;
}

message StructureMemberProto {
  string name = 1;
  DataType data_type = 2;
  repeated int32 shapes = 3;
  StructureMembersProto members = 4;
}
