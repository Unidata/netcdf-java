plugins {
  id 'base' // Adds 'assemble', 'check', 'build', and 'clean' tasks.
  id 'edu.ucar.unidata.site.jekyll'
}

//////////////////////////////////////////////// Javadoc ////////////////////////////////////////////////
apply from: "$rootDir/gradle/any/javadoc.gradle"
apply from: "$rootDir/gradle/any/testing.gradle"

dependencies {
  testImplementation enforcedPlatform(project(':netcdf-java-testing-platform'))

  testCompile project(':cdm:cdm-core')
  testCompile project(':cdm:cdm-s3')
  testCompile project(':netcdf4')
  testCompile project(':opendap')
  testCompile project(':cdm-test-utils')
  testCompile project(':bufr')
  testCompile project(':grib')
  testCompile 'org.slf4j:slf4j-api'
  testCompile 'junit:junit'
  testCompile 'com.google.truth:truth'

  testRuntimeOnly 'ch.qos.logback:logback-classic'
}

gradle.projectsEvaluated {  // Several statements below rely upon all subprojects having been evaluated.

  task buildJavadocPublicApi(type: Javadoc) {
    description = 'Generate Javadoc for the CDM subproject.'

    title = "NetCDF-Java CDM Public API v${version}"
    destinationDir = file("$buildDir/javadocCdm/")

    options.showFromPublic()
    options.noDeprecated()

    SourceSet cdmCoreSourceSet = rootProject.project(':cdm:cdm-core').sourceSets.main
    source cdmCoreSourceSet.allJava

    classpath = files([cdmCoreSourceSet.compileClasspath, cdmCoreSourceSet.output])

    // This is the public interface. Future changes to the API will attempt to remain backwards compatible with it.
    include 'thredds/client/catalog/*.java'
    include 'thredds/client/catalog/builder/*.java'
    include 'ucar/ma2/*.java'
    include 'ucar/nc2/*.java'
    include 'ucar/nc2/constants/*.java'
    include 'ucar/nc2/dataset/*.java'
    include 'ucar/nc2/dataset/spi/*.java'
    include 'ucar/nc2/iosp/*.java'
    include 'ucar/nc2/time/*.java'
    include 'ucar/nc2/units/*.java'
    include 'ucar/nc2/util/*.java'
    include 'ucar/nc2/write/*.java'
    include 'ucar/unidata/geoloc/*.java'
    include 'ucar/unidata/io/*.java'
    include 'ucar/unidata/io/spi/*.java'
  }

  task buildJavadocPublicApiWithDeps(type: Javadoc) {
    description = 'Generate Javadoc for the CDM subproject - included deprecated classes and methods.'

    title = "NetCDF-Java CDM Public API v${version} - with deprecations"
    destinationDir = file("$buildDir/javadocCdmWithDeps/")

    SourceSet cdmCoreSourceSet = rootProject.project(':cdm:cdm-core').sourceSets.main
    source cdmCoreSourceSet.allJava

    classpath = files([cdmCoreSourceSet.compileClasspath, cdmCoreSourceSet.output])

    // This is the public interface. Future changes to the API will attempt to remain backwards compatible with it.
    include 'thredds/client/catalog/*.java'
    include 'thredds/client/catalog/builder/*.java'
    include 'ucar/ma2/*.java'
    include 'ucar/nc2/*.java'
    include 'ucar/nc2/constants/*.java'
    include 'ucar/nc2/dataset/*.java'
    include 'ucar/nc2/dataset/spi/*.java'
    include 'ucar/nc2/iosp/*.java'
    include 'ucar/nc2/time/*.java'
    include 'ucar/nc2/units/*.java'
    include 'ucar/nc2/util/*.java'
    include 'ucar/nc2/write/*.java'
    include 'ucar/unidata/geoloc/*.java'
    include 'ucar/unidata/io/*.java'
    include 'ucar/unidata/io/spi/*.java'
  }

  task buildJavadocAll(type: Javadoc) {
    description = 'Generate Javadoc for all Java subprojects.'

    title = "NetCDF-Java All API v${version}"
    destinationDir = file("$buildDir/javadocAll/")

    source javaProjects.collect {
      project -> project.sourceSets.main.allJava
    }

    classpath = files(javaProjects.collect {project ->
      [project.sourceSets.main.compileClasspath, project.sourceSets.main.output]
    })
  }

  tasks.build {
    // Aggregates the individual "build*" tasks.
    dependsOn buildJekyllSite, buildJavadocPublicApi, buildJavadocAll
  }
}

//////////////////////////////////////////////// Nexus ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.

import edu.ucar.build.publishing.tasks.PublishToRawRepoTask

tasks.withType(PublishToRawRepoTask).all {  // Common PublishToRawRepoTask config.
  group = 'Documentation'

  host = 'https://artifacts.unidata.ucar.edu/'
  repoName = 'docs-netcdf-java'

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

tasks.register('publishAsVersionedUserGuide', PublishToRawRepoTask) {
  description = 'Publish user guide (versioned) to Nexus under /major.minor/.'

  publishSrc = buildJekyllSite.destinationDirectory.get()
  destPath = "$project.docVersion/userguide/"
  dependsOn tasks.getByName('buildJekyllSite')
}

tasks.register('publishAsCurrentUserGuide', PublishToRawRepoTask) {
  description = 'Publish the user guide to Nexus under /current/.'

  publishSrc = buildJekyllSite.destinationDirectory.get()
  destPath = 'current/userguide/'
  dependsOn tasks.getByName('buildJekyllSite')
}

gradle.projectsEvaluated {
  // These tasks must be in a "projectsEvaluated" block because they depend on tasks that are also in a
  // "projectsEvaluated" block.

  task publishAsVersionedJavadocPublicApi(type: PublishToRawRepoTask, dependsOn: buildJavadocPublicApi) {
    description = 'Publish Javadoc for the CDM subproject to Nexus under /major.minor/.'

    publishSrc = tasks.buildJavadocPublicApi.destinationDir
    destPath = "$project.docVersion/javadoc/"
  }

  task publishAsCurrentJavadocPublicApi(type: PublishToRawRepoTask, dependsOn: buildJavadocPublicApi) {
    description = 'Publish Javadoc for the CDM subproject to Nexus under /current/.'

    publishSrc = tasks.buildJavadocPublicApi.destinationDir
    destPath = 'current/javadoc/'
  }

  task publishAsVersionedJavadocPublicApiWithDeps(type: PublishToRawRepoTask, dependsOn: buildJavadocPublicApiWithDeps) {
    description = 'Publish Javadoc for the CDM subproject to Nexus under /major.minor/.'

    publishSrc = tasks.buildJavadocPublicApiWithDeps.destinationDir
    destPath = "$project.docVersion/javadoc-with-deprecations/"
  }

  task publishAsCurrentJavadocPublicApiWithDeps(type: PublishToRawRepoTask, dependsOn: buildJavadocPublicApiWithDeps) {
    description = 'Publish Javadoc for the CDM subproject to Nexus under /current/.'

    publishSrc = tasks.buildJavadocPublicApiWithDeps.destinationDir
    destPath = 'current/javadoc-with-deprecations/'
  }

  task publishAsVersionedJavadocAll(type: PublishToRawRepoTask, dependsOn: buildJavadocAll) {
    description = 'Publish Javadoc for all Java subprojects to Nexus under /major.minor/.'

    publishSrc = tasks.buildJavadocAll.destinationDir
    destPath = "$project.docVersion/javadocAll/"
  }

  task publishAsCurrentJavadocAll(type: PublishToRawRepoTask, dependsOn: buildJavadocAll) {
    description = 'Publish Javadoc for all Java subprojects to Nexus under /current/.'

    publishSrc = tasks.buildJavadocAll.destinationDir
    destPath = 'current/javadocAll/'
  }

  // We're deliberately NOT naming this task "publish", because we don't want it running when we do a:
  //     ./gradlew publish
  // from the root directory. It simply takes too long.
  task publishAllDocsAsVersioned(group: 'Documentation') {
    description = 'Publish user guide and both Javadoc sets to Nexus under /major.minor/.'

    // Aggregates the individual "publish*" tasks.
    dependsOn publishAsVersionedUserGuide, publishAsVersionedJavadocPublicApi,
        publishAsVersionedJavadocPublicApiWithDeps, publishAsVersionedJavadocAll
  }

  task publishAllDocsAsCurrent(group: 'Documentation') {
    description = 'Publish user guide and both Javadoc sets to Nexus under /current/.'

    // Aggregates the individual "publish*" tasks.
    dependsOn publishAsCurrentUserGuide, publishAsCurrentJavadocPublicApi, publishAsCurrentJavadocPublicApiWithDeps,
        publishAsCurrentJavadocAll
  }
}

import edu.ucar.build.publishing.tasks.DeleteFromNexusTask

// By default, this will perform a dry run, which simply prints the components that the query matched.
// To actually delete those components, do:  ./gradlew :docs:deleteFromNexus --dryRun=false
task deleteVersionedDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
  description = 'Remove user guide and both Javadoc sets on Nexus under /major.minor/.'
  host = 'https://artifacts.unidata.ucar.edu/'
  searchQueryParameters.repository = 'docs-netcdf-java'
  searchQueryParameters.group = "/$project.docVersion/*"

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

task deleteCurrentDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
  description = 'Remove user guide and both Javadoc sets on Nexus under /current/.'
  host = 'https://artifacts.unidata.ucar.edu/'
  searchQueryParameters.repository = 'docs-netcdf-java'
  searchQueryParameters.group = '/current/*'

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  // whatever java is being used to run gradle will be used to compile java classes
  // in src/main, but this makes sure it outputs bytecode compatible with Java 8
  if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    options.setRelease(8)
  } else {
    // java 8 does not have a release option, so use source and target compatibility
    setSourceCompatibility(JavaVersion.VERSION_1_8)
    setTargetCompatibility(JavaVersion.VERSION_1_8)
  }
  // show deprecation details
  options.compilerArgs = ['-Xlint:deprecation']
}

apply plugin: 'com.diffplug.gradle.spotless'
spotless {
  java {
    // target java files in the test directory
    target 'src/test/java/**/*.java'
    eclipse().configFile("$rootDir/project-files/code-styles/eclipse-style-guide.xml",
            'src/test/style/style-override.properties')
    encoding 'UTF-8'
  }
}
