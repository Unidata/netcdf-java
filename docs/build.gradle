plugins {
  id 'base' // Adds 'assemble', 'check', 'build', and 'clean' tasks.
  id 'jekyll' // comes from buildSrc/
}

//////////////////////////////////////////////// Javadoc ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/javadoc.gradle"

gradle.projectsEvaluated {  // Several statements below rely upon all subprojects having been evaluated.

  task buildJavadocPublicApi(type: Javadoc) {
    description = 'Generate Javadoc for the CDM subproject.'

    title = "NetCDF-Java CDM Public API v${version}"
    destinationDir = file("$buildDir/javadocCdm/")

    options.showFromPublic()
    options.noDeprecated()

    SourceSet cdmCoreSourceSet = rootProject.project(':cdm:cdm-core').sourceSets.main
    source cdmCoreSourceSet.allJava

//    SourceSet cdmImageSourceSet = rootProject.project(':cdm:cdm-image').sourceSets.main
//    source cdmImageSourceSet.allJava

//    SourceSet cdmRadialSourceSet = rootProject.project(':cdm:cdm-radial').sourceSets.main
//    source cdmRadialSourceSet.allJava

    classpath = files([cdmCoreSourceSet.compileClasspath, cdmCoreSourceSet.output])
//                       cdmImageSourceSet.compileClasspath, cdmImageSourceSet.output,
//                       cdmRadialSourceSet.compileClasspath, cdmRadialSourceSet.output])

    // This is the public interface. Future changes to the API will attempt to remain backwards compatible with it.
    include 'thredds/client/catalog/*.java'
    include 'thredds/client/catalog/builder/*.java'
    include 'ucar/ma2/*.java'
    include 'ucar/nc2/*.java'
    include 'ucar/nc2/constants/*.java'
    include 'ucar/nc2/dataset/*.java'
    include 'ucar/nc2/dataset/spi/*.java'
    include 'ucar/nc2/iosp/*.java'
    include 'ucar/nc2/time/*.java'
    include 'ucar/nc2/units/*.java'
    include 'ucar/nc2/util/*.java'
    include 'ucar/nc2/write/*.java'
    include 'ucar/unidata/geoloc/*.java'
    include 'ucar/unidata/io/*.java'
    include 'ucar/unidata/io/spi/*.java'
  }

  task buildJavadocAll(type: Javadoc) {
    description = 'Generate Javadoc for all Java subprojects.'

    title = "NetCDF-Java All API v${version}"
    destinationDir = file("$buildDir/javadocAll/")

    source javaProjects.collect {
      project -> project.sourceSets.main.allJava
    }

    classpath = files(javaProjects.collect {project ->
      [project.sourceSets.main.compileClasspath, project.sourceSets.main.output]
    })
  }

  tasks.build {
    // Aggregates the individual "build*" tasks.
    dependsOn buildJekyllSite, buildJavadocPublicApi, buildJavadocAll
  }
}

//////////////////////////////////////////////// Nexus ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.

import edu.ucar.build.publishing.PublishToRawRepoTask

tasks.withType(PublishToRawRepoTask).all {  // Common PublishToRawRepoTask config.
  group = 'Documentation'

  host = 'https://artifacts.unidata.ucar.edu/'
  repoName = 'netcdf-java-docs'

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

task publishAsVersionedUserGuide(type: PublishToRawRepoTask, dependsOn: buildJekyllSite) {
  description = 'Publish user guide (versioned) to Nexus under /major.minor/.'

  publishSrc = jekyllDestinationDir
  destPath = "netcdf-java/$project.docVersion/userguide/"
}

task publishAsCurrentUserGuide(type: PublishToRawRepoTask, dependsOn: buildJekyllSite) {
  description = 'Publish the user guide to Nexus under /current/.'

  publishSrc = jekyllDestinationDir
  destPath = 'netcdf-java/current/userguide/'
}

gradle.projectsEvaluated {
  // These tasks must be in a "projectsEvaluated" block because they depend on tasks that are also in a
  // "projectsEvaluated" block.

  task publishAsVersionedJavadocPublicApi(type: PublishToRawRepoTask, dependsOn: buildJavadocPublicApi) {
    description = 'Publish Javadoc for the CDM subproject to Nexus under /major.minor/.'

    publishSrc = tasks.buildJavadocPublicApi.destinationDir
    destPath = "netcdf-java/$project.docVersion/javadoc/"
  }

  task publishAsCurrentJavadocPublicApi(type: PublishToRawRepoTask, dependsOn: buildJavadocPublicApi) {
    description = 'Publish Javadoc for the CDM subproject to Nexus under /current/.'

    publishSrc = tasks.buildJavadocPublicApi.destinationDir
    destPath = 'netcdf-java/current/javadoc/'
  }

  task publishAsVersionedJavadocAll(type: PublishToRawRepoTask, dependsOn: buildJavadocAll) {
    description = 'Publish Javadoc for all Java subprojects to Nexus under /major.minor/.'

    publishSrc = tasks.buildJavadocAll.destinationDir
    destPath = "netcdf-java/$project.docVersion/javadocAll/"
  }

  task publishAsCurrentJavadocAll(type: PublishToRawRepoTask, dependsOn: buildJavadocAll) {
    description = 'Publish Javadoc for all Java subprojects to Nexus under /current/.'

    publishSrc = tasks.buildJavadocAll.destinationDir
    destPath = 'netcdf-java/current/javadocAll/'
  }

  // We're deliberately NOT naming this task "publish", because we don't want it running when we do a:
  //     ./gradlew publish
  // from the root directory. It simply takes too long.
  task publishAllDocsAsVersioned(group: 'Documentation') {
    description = 'Publish user guide and both Javadoc sets to Nexus under /major.minor/.'

    // Aggregates the individual "publish*" tasks.
    dependsOn publishAsVersionedUserGuide, publishAsVersionedJavadocPublicApi, publishAsVersionedJavadocAll
  }

  task publishAllDocsAsCurrent(group: 'Documentation') {
    description = 'Publish user guide and both Javadoc sets to Nexus under /current/.'

    // Aggregates the individual "publish*" tasks.
    dependsOn publishAsCurrentUserGuide, publishAsCurrentJavadocPublicApi, publishAsCurrentJavadocAll
  }
}

import edu.ucar.build.publishing.DeleteFromNexusTask

// By default, this will perform a dry run, which simply prints the components that the query matched.
// To actually delete those components, do:  ./gradlew :docs:deleteFromNexus --dryRun=false
task deleteVersionedDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
  description = 'Remove user guide and both Javadoc sets on Nexus under /major.minor/.'
  host = 'https://artifacts.unidata.ucar.edu/'
  searchQueryParameters.repository = 'netcdf-java-docs'
  searchQueryParameters.group = "/netcdf-java/$project.docVersion/*"

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

task deleteCurrentDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
  description = 'Remove user guide and both Javadoc sets on Nexus under /current/.'
  host = 'https://artifacts.unidata.ucar.edu/'
  searchQueryParameters.repository = 'netcdf-java-docs'
  searchQueryParameters.group = '/netcdf-java/current/*'

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}
