buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath libraries["jruby-gradle-plugin"]
    }
}

// Adds 'assemble', 'check', 'build', and 'clean' tasks.
// See: https://docs.gradle.org/current/userguide/standard_plugins.html#sec:base_plugins
apply plugin: 'base'

//////////////////////////////////////////////// Jekyll ////////////////////////////////////////////////

apply plugin: 'com.github.jruby-gradle.base'

dependencies {
    jrubyExec 'rubygems:jekyll:3.8.6'
    // Without this, we get: LoadError: no such file to load -- bundler
    jrubyExec 'rubygems:bundler:2.0.2'
}

ext {
    userGuideSrcDir = file("src/public/userguide/")
    userGuideDestDir = file("$buildDir/userguide/")
    
    commonFlags = [ '--source', userGuideSrcDir.absolutePath, '--destination', userGuideDestDir.absolutePath ]
}

import com.github.jrubygradle.JRubyExec

task buildUserGuide(type: JRubyExec) {
    group = "Documentation"
    description = 'Build user guide website.'
    
    inputs.files userGuideSrcDir
    outputs.dir userGuideDestDir
    
    script "jekyll"
    
    scriptArgs "build"
    scriptArgs commonFlags
    
    // Consider enabling this to help us determine when pages need to be pushed to Nexus.
    // A copy of .jekyll-metadata could be stored in the repo and then compared to the local file.
    // See https://jekyllrb.com/docs/configuration/#incremental-regeneration
    // scriptArgs "--incremental"
}

task serveUserGuide(type: JRubyExec) {
    group = "Documentation"
    description = 'Serve user guide website locally.'
    
    // This task starts a server; it is never considered UP-TO-DATE.
    outputs.upToDateWhen { false }
    
    script "jekyll"
    
    scriptArgs "serve"
    scriptArgs commonFlags
    
}

//////////////////////////////////////////////// Javadoc ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/javadoc.gradle"

evaluationDependsOn(":uicdm")  // Evaluate ":uicdm" first so that all :cdm SourceSets will have been added to the Project.
                               // Not sure this is true, but let's see...

task buildJavadocCdm(type: Javadoc) {
    description = "Generate Javadoc for the CDM subproject."
    
    title = "NetCDF-Java CDM API v${version}"
    destinationDir = file("$buildDir/javadocCdm/")

    options.showFromPublic()

    SourceSet cdmCoreSourceSet = rootProject.project(":cdm:cdm-core").sourceSets.main
    source cdmCoreSourceSet.allJava

    SourceSet cdmImageSourceSet = rootProject.project(":cdm:cdm-image").sourceSets.main
    source cdmImageSourceSet.allJava

    SourceSet cdmRadialSourceSet = rootProject.project(":cdm:cdm-radial").sourceSets.main
    source cdmRadialSourceSet.allJava
    
    classpath = files([ cdmCoreSourceSet.compileClasspath, cdmCoreSourceSet.output,
                        cdmImageSourceSet.compileClasspath, cdmImageSourceSet.output,
                        cdmRadialSourceSet.compileClasspath, cdmRadialSourceSet.output])
    
    // This is the public interface. Future changes to the API will attempt to remain backwards compatible with it.
    include 'thredds/client/catalog/*.java'
    include 'ucar/ma2/*.java'
    include 'ucar/nc2/*.java'
    include 'ucar/nc2/constants/*.java'
    include 'ucar/nc2/dataset/**/*.java'
    include 'ucar/nc2/dt/RadialDatasetSweep.java'
    include 'ucar/nc2/ft/*.java'
    include 'ucar/nc2/ft/point/*.java'
    include 'ucar/nc2/ft/radial/*.java'
    include 'ucar/nc2/ft2/coverage/*.java'
    include 'ucar/nc2/iosp/*.java'
    include 'ucar/nc2/ncml/*.java'
    include 'ucar/nc2/time/*.java'
    include 'ucar/nc2/units/*.java'
    include 'ucar/nc2/util/*.java'
    include 'ucar/unidata/**/*.java'
}

gradle.projectsEvaluated {  // Evaluate all projects first so that SourceSets will have been created for each.
    task buildJavadocAll(type: Javadoc) {
        description = "Generate Javadoc for all Java subprojects."
        
        title = "NetCDF-Java All API v${version}"
        destinationDir = file("$buildDir/javadocAll/")
        
        source publishedProjects.collect { project -> project.sourceSets.main.allJava }
        classpath = files(publishedProjects.collect { project ->
            [ project.sourceSets.main.compileClasspath, project.sourceSets.main.output ] })
    }
    
    tasks.build {
        // Aggregates the individual "build*" tasks.
        dependsOn buildUserGuide, buildJavadocCdm, buildJavadocAll
    }
}

//////////////////////////////////////////////// Nexus ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.

import edu.ucar.build.publishing.PublishToRawRepoTask

tasks.withType(PublishToRawRepoTask).all {  // Common PublishToRawRepoTask config.
    group = "Documentation"
    
    host = "https://artifacts.unidata.ucar.edu/"
    repoName = "netcdf-java-docs"
    
    onlyIf {
        // Will be evaluated at task execution time, not during configuration.
        // Fails the build if the specified properties haven't been provided.
        username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
        password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
        return true
    }
}

task publishUserGuide(type: PublishToRawRepoTask, dependsOn: buildUserGuide) {
    description = "Publish user guide to Nexus."

    srcFile = userGuideDestDir
    destPath = "netcdf-java/$project.docVersion/userguide/"
}

task publishJavadocCdm(type: PublishToRawRepoTask, dependsOn: buildJavadocCdm) {
    description = "Publish Javadoc for the CDM subproject to Nexus."
    
    srcFile = tasks.buildJavadocCdm.destinationDir
    destPath = "netcdf-java/$project.docVersion/javadoc/"
}

gradle.projectsEvaluated {
    // These tasks must be in a "projectsEvaluated" block because they depend on tasks that are also in a
    // "projectsEvaluated" block.
    
    task publishJavadocAll(type: PublishToRawRepoTask, dependsOn: buildJavadocAll) {
        description = "Publish Javadoc for all Java subprojects to Nexus."
        
        srcFile = tasks.buildJavadocAll.destinationDir
        destPath = "netcdf-java/$project.docVersion/javadocAll/"
    }
    
    // We're deliberately NOT naming this task "publish", because we don't want it running when we do a:
    //     ./gradlew publish
    // from the root directory. It simply takes too long.
    task publishDocs(group: "Documentation") {
        description = "Publish user guide and both Javadoc sets to Nexus."
        
        // Aggregates the individual "publish*" tasks.
        dependsOn publishUserGuide, publishJavadocCdm, publishJavadocAll
    }
}

import edu.ucar.build.publishing.DeleteFromNexusTask

// By default, this will perform a dry run, which simply prints the components that the query matched.
// To actually delete those components, do:  ./gradlew :docs:deleteFromNexus --dryRun=false
task deleteFromNexus(type: DeleteFromNexusTask) {
    host = "https://artifacts.unidata.ucar.edu/"
    searchQueryParameters.repository = 'netcdf-java-docs'
    searchQueryParameters.group = "/netcdf-java/$project.docVersion/*"

    onlyIf {
        // Will be evaluated at task execution time, not during configuration.
        // Fails the build if the specified properties haven't been provided.
        username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
        password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
        return true
    }
}
