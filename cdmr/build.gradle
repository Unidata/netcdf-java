import com.github.psxpaul.task.JavaExecFork

plugins {
  // Provide convenience executables for testing
  id 'application'
  id 'com.github.psxpaul.execfork' version '0.1.13'
}

description = 'CDM remote access using gRPC.'
ext.title = 'CDM remote access'

apply from: "$rootDir/gradle/any/dependencies.gradle"
apply from: "$rootDir/gradle/any/java-library.gradle"
apply from: "$rootDir/gradle/any/protobuf.gradle"

dependencies {
  api enforcedPlatform("io.grpc:grpc-bom:${depVersion.grpc}")

  api project(':cdm:cdm-core')

  // for CdmrServer: we should just add on the classpath?
  api project(':bufr')
  api project(':grib')

  implementation 'io.grpc:grpc-protobuf'
  implementation 'io.grpc:grpc-stub'
  compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

  runtimeOnly 'io.grpc:grpc-netty-shaded'

  testImplementation enforcedPlatform(project(':netcdf-java-testing-platform'))
  testImplementation project(':cdm-test-utils')
  testImplementation 'com.google.truth:truth'
  testImplementation 'junit:junit'
  testImplementation 'commons-io:commons-io'
  testImplementation "org.mockito:mockito-core"
  testImplementation 'io.grpc:grpc-testing'

  testRuntimeOnly 'ch.qos.logback:logback-classic'
}

protobuf {
  protoc { artifact = "com.google.protobuf:protoc:${depVersion.protobuf}" }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:${depVersion.grpc}" }
  }
  generateProtoTasks {
    all()*.plugins { grpc {} }
  }
}

application {
  mainClass = 'ucar.cdmr.server.CdmrServer'
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
  main {
    java {
      // not needed for proto generated source
      srcDirs 'build/generated/source/proto/main/grpc'
      srcDirs 'build/generated/source/proto/main/java'
    }
  }
}

task startDaemon(type: JavaExecFork) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'ucar.cdmr.server.CdmrServer'
  jvmArgs = [ '-Xmx512m', '-Djava.awt.headless=true' ]
  standardOutput = "$buildDir/cdmr_logs/cdmr.log"
  errorOutput = "$buildDir/cdmr_logs/cdmr-error.log"
  stopAfter = test
  waitForPort = 16111
  waitForOutput = 'Server started, listening on 16111'
}

test.dependsOn(startDaemon)
